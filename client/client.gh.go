// Code generated by gohandlers v0.36.0. DO NOT EDIT.

package client

import (
	"fmt"
	"net/http"

	"github.com/ufukty/gohandlers-petstore/handlers/pets"
)

type Interface interface {
	Create(*pets.CreateRequest) (*pets.CreateResponse, error)
	Delete(*pets.DeleteRequest) (*http.Response, error)
	Get(*pets.GetRequest) (*pets.GetResponse, error)
	List(*pets.ListRequest) (*pets.ListResponse, error)
}

type Mock struct {
	CreateFunc func(*pets.CreateRequest) (*pets.CreateResponse, error)
	DeleteFunc func(*pets.DeleteRequest) (*http.Response, error)
	GetFunc    func(*pets.GetRequest) (*pets.GetResponse, error)
	ListFunc   func(*pets.ListRequest) (*pets.ListResponse, error)
}

func (m *Mock) Create(bq *pets.CreateRequest) (*pets.CreateResponse, error) {
	if m.CreateFunc == nil {
		return nil, fmt.Errorf("not implemented: Create")
	}
	return m.CreateFunc(bq)
}

func (m *Mock) Delete(bq *pets.DeleteRequest) (*http.Response, error) {
	if m.DeleteFunc == nil {
		return nil, fmt.Errorf("not implemented: Delete")
	}
	return m.DeleteFunc(bq)
}

func (m *Mock) Get(bq *pets.GetRequest) (*pets.GetResponse, error) {
	if m.GetFunc == nil {
		return nil, fmt.Errorf("not implemented: Get")
	}
	return m.GetFunc(bq)
}

func (m *Mock) List(bq *pets.ListRequest) (*pets.ListResponse, error) {
	if m.ListFunc == nil {
		return nil, fmt.Errorf("not implemented: List")
	}
	return m.ListFunc(bq)
}

type Pool interface {
	Host() (string, error)
}

type Client struct {
	p Pool
}

func NewClient(p Pool) *Client {
	return &Client{p: p}
}

func (c *Client) Create(bq *pets.CreateRequest) (*pets.CreateResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("Host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("Build: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("Do: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &pets.CreateResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("Parse: %w", err)
	}
	return bs, nil
}

func (c *Client) Delete(bq *pets.DeleteRequest) (*http.Response, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("Host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("Build: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("Do: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return rs, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	return rs, nil
}

func (c *Client) Get(bq *pets.GetRequest) (*pets.GetResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("Host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("Build: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("Do: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &pets.GetResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("Parse: %w", err)
	}
	return bs, nil
}

func (c *Client) List(bq *pets.ListRequest) (*pets.ListResponse, error) {
	h, err := c.p.Host()
	if err != nil {
		return nil, fmt.Errorf("Host: %w", err)
	}
	rq, err := bq.Build(h)
	if err != nil {
		return nil, fmt.Errorf("Build: %w", err)
	}
	rs, err := http.DefaultClient.Do(rq)
	if err != nil {
		return nil, fmt.Errorf("Do: %w", err)
	}
	if rs.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("non-200 status code: %d (%s)", rs.StatusCode, http.StatusText(rs.StatusCode))
	}
	bs := &pets.ListResponse{}
	err = bs.Parse(rs)
	if err != nil {
		return nil, fmt.Errorf("Parse: %w", err)
	}
	return bs, nil
}
